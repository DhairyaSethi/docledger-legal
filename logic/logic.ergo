/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.example.fulluponsign

import org.accordproject.cicero.runtime.*
import org.accordproject.signature.ContractSigned
import org.accordproject.payment.PaymentReceieved

contract PaymentOnSignature over PaymentOnSignatureContract state PaymentOnSignatureSTate {

  clause init(request: Request) : Response {
    set state PaymentOnSignatureState {
      stateId: '1',
      status: INITIALIZED
    };

    return Response{}

  }

  clause contractSigned (request: ContractSigned) : Response emits DonationObligation {
    
    enforce (state.status = INITIALIZED)
    else throw ErgoErroResponse{ message:  `Contract state is currently invalid. Status --> {{% state.status %}}`};

    emit DonationObligation{
      contract: contract,
      promisor: some(contract.Donor_current),
      promisee: some(contract.docLedger),
      deadline: none,
      amount: contract.amount,
      description: contract.Donor_current.partyId ++ 'is paying contract amount ' ++ contract.amount ++ ' to docLedger.'
    };
    
    set state PaymentOnSignatureSTate{
      stateId: '1',
      status: EMITTED
    }

  }

  clause donationReceived(request : PaymentReceieved): Response {
    enfore (state.status = EMITTED)
    else throw ErgoErroResponse{ message: `Contract not Initialized by donor OR payment already recieved.` };
    
    set state PaymentOnSignatureSTate {
      stateId: state.stateId,
      status: COMPLETED
    };

    return Response{}
  }
  // Simple Clause
  clause helloworld(request : MyRequest) : MyResponse {
    return MyResponse{ output: "Hello " ++ contract.name ++ " " ++ request.input }
  }
}